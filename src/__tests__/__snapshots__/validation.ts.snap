// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@is as parameter decorator infers the converter 1`] = `
Processed {
  "value": "test",
}
`;

exports[`\`@is\` with an array 1`] = `
Processed {
  "nested": Object {
    "test": Processed {
      "errors": Array [
        "Shorter than minimum length of 2.",
      ],
    },
  },
}
`;

exports[`\`@is\` with an array 2`] = `
Processed {
  "value": Object {
    "test": Array [
      Object {
        "test": 8,
      },
      Object {
        "test": 10,
      },
      Object {
        "test": 11,
      },
    ],
  },
}
`;

exports[`\`@is\` with an array 3`] = `
Processed {
  "nested": Object {
    "test": Processed {
      "errors": Array [
        "Missing required field.",
      ],
    },
  },
}
`;

exports[`\`@is\` with no chance to infer the type 1`] = `"Cannot infer type. Perhaps a cyclic dependency? Use @specify or provide a converter."`;

exports[`\`@is\` with the type specified explicitly in a parameter 1`] = `
Processed {
  "nested": Object {
    "test": Processed {
      "errors": Array [
        "Not a valid string.",
      ],
    },
  },
}
`;

exports[`\`arr\` works as expected 1`] = `
Processed {
  "value": Array [],
}
`;

exports[`\`arr\` works as expected 2`] = `
Processed {
  "value": Array [
    1,
    2,
    3,
  ],
}
`;

exports[`\`arr\` works as expected 3`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 4`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 5`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 6`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 7`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 8`] = `Processed {}`;

exports[`\`arr\` works as expected 9`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 10`] = `
Processed {
  "nested": Object {
    "0": Processed {
      "errors": Array [
        "Not a valid string.",
      ],
    },
    "1": Processed {
      "errors": Array [
        "Not a valid string.",
      ],
    },
    "2": Processed {
      "errors": Array [
        "Not a valid string.",
      ],
    },
    "3": Processed {
      "errors": Array [
        "Not a valid string.",
      ],
    },
  },
}
`;

exports[`\`arr\` works as expected 11`] = `
Processed {
  "value": Array [
    "a",
    "b",
    "c",
  ],
}
`;

exports[`\`arr\` works as expected 12`] = `
Processed {
  "value": Array [],
}
`;

exports[`\`arr\` works as expected 13`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 14`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 15`] = `
Processed {
  "value": Array [
    1,
    2,
    3,
  ],
}
`;

exports[`\`arr\` works as expected 16`] = `
Processed {
  "value": Array [
    1,
    2,
  ],
}
`;

exports[`\`arr\` works as expected 17`] = `
Processed {
  "nested": Object {
    "3": Processed {
      "errors": Array [
        "Not one of (1, 2, 3).",
      ],
    },
  },
}
`;

exports[`\`arr\` works as expected 18`] = `
Processed {
  "value": Array [],
}
`;

exports[`\`arr\` works as expected 19`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`arr\` works as expected 20`] = `
Processed {
  "errors": Array [
    "Not an array.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 1`] = `
Processed {
  "value": "a",
}
`;

exports[`\`processValue\` processes inputs as expected 2`] = `
Processed {
  "value": "b",
}
`;

exports[`\`processValue\` processes inputs as expected 3`] = `
Processed {
  "errors": Array [
    "Not one of (a, b).",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 4`] = `
Processed {
  "errors": Array [
    "Not one of (a, b).",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 5`] = `
Processed {
  "errors": Array [
    "Not a valid string.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 6`] = `
Processed {
  "errors": Array [
    "Not a valid string.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 7`] = `Processed {}`;

exports[`\`processValue\` processes inputs as expected 8`] = `
Processed {
  "errors": Array [
    "Not a valid string.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 9`] = `
Processed {
  "errors": Array [
    "Not a valid string.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 10`] = `
Processed {
  "errors": Array [
    "Not a valid integer.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 11`] = `
Processed {
  "errors": Array [
    "Not a valid integer.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 12`] = `
Processed {
  "value": 10,
}
`;

exports[`\`processValue\` processes inputs as expected 13`] = `
Processed {
  "errors": Array [
    "Not a valid integer.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 14`] = `
Processed {
  "errors": Array [
    "Missing required field.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 15`] = `
Processed {
  "errors": Array [
    "Not a valid integer.",
  ],
}
`;

exports[`\`processValue\` processes inputs as expected 16`] = `
Processed {
  "errors": Array [
    "Not a valid integer.",
  ],
}
`;

exports[`\`processValue\` without a converter 1`] = `
Processed {
  "value": "test",
}
`;

exports[`The test schema detects a invalid input as invalid 1`] = `
Processed {
  "nested": Object {
    "a": Processed {
      "errors": Array [
        "Not a valid integer.",
      ],
    },
    "d": Processed {
      "errors": Array [
        "Unexpected key.",
      ],
    },
  },
}
`;

exports[`The test schema detects a invalid input as invalid 2`] = `
Processed {
  "nested": Object {
    "a": Processed {
      "errors": Array [
        "Not a valid integer.",
      ],
    },
  },
}
`;

exports[`The test schema detects a invalid input as invalid 3`] = `
Processed {
  "nested": Object {
    "arraOfArrays": Processed {
      "nested": Object {
        "0": Processed {
          "errors": Array [
            "Not an array.",
          ],
        },
      },
    },
  },
}
`;

exports[`The test schema detects a invalid input as invalid 4`] = `
Processed {
  "nested": Object {
    "arraOfArrays": Processed {
      "nested": Object {
        "0": Processed {
          "nested": Object {
            "0": Processed {
              "errors": Array [
                "Not one of (5, 6, 7).",
              ],
            },
          },
        },
      },
    },
  },
}
`;

exports[`The test schema detects a invalid input as invalid 5`] = `
Processed {
  "nested": Object {
    "a": Processed {
      "errors": Array [
        "Not one of (1, 2, 3, 4).",
      ],
    },
    "b": Processed {
      "nested": Object {
        "c": Processed {
          "errors": Array [
            "Not a valid integer.",
          ],
        },
      },
    },
    "d": Processed {
      "errors": Array [
        "Missing required field.",
      ],
    },
  },
}
`;

exports[`The test schema detects a invalid input as invalid 6`] = `
Processed {
  "nested": Object {
    "f": Processed {
      "nested": Object {
        "0": Processed {
          "nested": Object {
            "g": Processed {
              "errors": Array [
                "Exceeds maximum length of 5.",
              ],
            },
          },
        },
      },
    },
  },
}
`;

exports[`The test schema detects a invalid input as invalid 7`] = `
Processed {
  "nested": Object {
    "e": Processed {
      "nested": Object {
        "0": Processed {
          "errors": Array [
            "Not one of (1, 2, 3).",
          ],
        },
        "1": Processed {
          "errors": Array [
            "Not one of (1, 2, 3).",
          ],
        },
        "2": Processed {
          "errors": Array [
            "Not one of (1, 2, 3).",
          ],
        },
      },
    },
  },
}
`;

exports[`The test schema detects a invalid input as invalid 8`] = `
Processed {
  "nested": Object {
    "d": Processed {
      "errors": Array [
        "Missing required field.",
      ],
    },
  },
}
`;
